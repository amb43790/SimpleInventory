#!/usr/bin/perl

use strict;
use warnings;

use DBI;

use Inventory;

my $test_import = 0;
if (@ARGV) {
    if ($ARGV[0] eq '--test-import') {
        $test_import = 1;
    } else {
        print STDERR "Unknown parameter $ARGV[0]\n";
        exit 1;
    }
}

my $db = Inventory->connect();
unless ($db) {
    print STDERR "Can't create/connect to DB inventory.sqlite3: ".$DBI::errstr."\n";
    exit 1;
}

$SIG{'INT'} = sub {
    print "Exiting without saving changes...\n";
    $db->rollback;
    exit;
};

$|=1;

my $order;

if ($0 =~ m/expire_items$/) {
    print "\cG\n*** Removing expired items from the database!\n\n";
    my $order_number = 'Removing expired items ' . scalar(localtime);
    $order = $db->create_order($order_number,'expired');

} else {
    print "Order number: ";
    my $order_number = <STDIN>;
    chomp $order_number;
    $order = $db->create_order($order_number,'sale');
}

while(1) {
    print "Scan item...";

    my $barcode = <STDIN>;
    chomp $barcode if $barcode;
    last unless $barcode;

    $order->sell_item_by_barcode($barcode);
}

my $problems = 0;
until( eval { $order->save }) {
    $problems++;

    print STDERR "\cG\nFound a problem: $@\n";

    if ($@ =~ m/Count below 0 for barcode (\S+)/) {
        $order->remove_barcode($1);

    } elsif ($@ =~ m/No item with barcode (\S+)/) {
        $order->remove_barcode($1);

    } else {
        print STDERR "Don't know how to continue with that error...\n";
        last;
    }
}

if ($problems) {
    my @barcodes = $order->barcodes();
    print STDERR scalar(@barcodes), " other items had no problems\n";
    print STDERR "Reversing all changes and exiting\n";
    $db->rollback();
} elsif ($test_import) {
    $db->rollback();
    print STDERR "Rolling back changes from test import\n";
} else {
    $db->commit();
    print "\nSaving changes!\n";
}

$db->disconnect();


